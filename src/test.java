//1) რა არის JVM? (2 ქულა)
//
//        jvm არის ჯავას ვირტუალური მანქანა,რომელიც bycodes უკითხავს და უთარგმნის ოპერაციულ სისტემას.
//        Java ვირტუალური მანქანა (JVM) არის ძრავა,
//        რომელიც უზრუნველყოფს სამუშაო დროის გარემოებას Java კოდის ან აპლიკაციების მართვისთვის.
//        ის გარდაქმნის ჯავას bytecode-ს მანქანურ ენად.
//        JVM არის Java Run Environment-ის (JRE) ნაწილი.
//        აქვე, ჯავას შემდგენელი აწარმოებს კოდს ვირტუალური მანქანისთვის, რომელიც ცნობილია როგორც Java Virtual Machine.
//
//
//        JVM-ის გამოყენების მნიშვნელოვანი მიზეზები:
//
//        JVM გთავაზობთ პლატფორმისგან დამოუკიდებელ გზას Java-ს კოდის შესასრულებლად;
//
//        მას აქვს მრავალი ბიბლიოთეკა, ხელსაწყო და სამუშაო ჩარჩო;
//
//        Java პროგრამის გაშვების შემდეგ, შეგიძლიათ ნებისმიერ პლატფორმაზე გაუშვათ და დაზოგოთ ბევრი დრო;
//
//        JVM მოყვება JIT (Just-in-Time) შემდგენელი,
//        რომელიც გარდაქმნის ჯავას წყაროს კოდს დაბალი დონის ენად.
//        აქიდან გამომდინარე, ის უფრო სწრაფად მუშაობს, ვიდრე ჩვეულებრივი აპლიკაცია.
//
//
//        ----------------------------------------------------------------------------------------------------
//
//        2) რა არის JDK? (2 ქულა)
//
//        JDK არის პროგრამული უზრუნველყოფის განვითარების გარემო, რომელიც გამოიყენება აპლეტებისა და Java აპლიკაციების შესაქმნელად.
//        JDK-ის სრული ფორმა არის Java Development Kit.
//        ჯავას დეველოპერებს შეუძლიათ გამოიყენონ ის Windows-ზე, macOS-ზე, Solaris-სა და Linux-ზე.
//        JDK ეხმარება მათ Java პროგრამების კოდირებაში და გაშვებაში. შესაძლებელია ერთზე მეტი JDK ვერსიის დაყენება იმავე კომპიუტერზე.
//
//        JDK გამოყენების ძირითადი მიზეზები:
//
//        JDK შეიცავს ინსტრუმენტებს, რომლებიც საჭიროა Java პროგრამების დასაწერად და JRE მათი შესასრულებლად;
//
//        მასში შედის შემდგენელი, Java აპლიკაციის გამშვები, Appletviewer და ა.შ;
//
//        შემდგენელი გარდაქმნის ჯავაში დაწერილ კოდს ბაიტად;
//
//        Java აპლიკაციის გამშვები ხსნის JRE-ს, ტვირთავს საჭირო კლასს და ახორციელებს მის ძირითად მეთოდს.
//
//
//
//        ----------------------------------------------------------------------------------------------------
//
//
//        3) რა არის პრიმიტივი? (2 ქულა)
//
//        ჯავაში გვაქვს ორი ტიპის ცვლადი ესენი არის : პრიმიტივები და მიმთითებლები,პრიმიტივები არის მონაცემთა ძირითადი ტიპები,
//        რომლებიც ხელმისაწვდომია java ენაში, ესენი კი გახლავთ : boolean,byte,char,short,int,long,float,double.
//
//        ----------------------------------------------------------------------------------------------------
//
//
//        4) რა განსხვავებაა პრიმიტივსა და ობიექტს შორის? (2 ქულა)
//
//        ობიექტს მოიხსენიებენ, როგორც non-primitive ან reference data type. პრიმიტიული მონაცემთა ტიპებისგან განსხვავებით,
//        არაპრიმიტიულს ქმნიან მომხმარებლები ჯავაშის, მაგალითდ ესეთებია მასივები, კლასები ინტერფეისები და ა.შ, სწორედ ეს განსხვავებაა
//        პრიმიტივებსა და ეგრედ წოდებულ ობიექტებს შორის.
//
//        ----------------------------------------------------------------------------------------------------
//
//        5) რატომ ეძახიან JAVA-ს მულტიპლატფორმულ პროგრამირების ენას? (2 ქულა)
//
//
//        იმიტომ ეძახიან, რომ C-ის შემდგენლის მსგავსად,
//        Java-ს შემდგენელი არ აწარმოებს ბუნებრივ შესრულებად კოდს კონკრეტული მანქანისთვის. ამის ნაცვლად,
//        ჯავა აწარმოებს უნიკალურ ფორმატს, რომელსაც ეწოდება bytecode,
//        რომელიც ვირტუალური მანქანის სპეციფიკაციაში ასახული წესების მიხედვით ხორციელდება,
//        ამიტომ Java პლატფორმისგან დამოუკიდებელი ენაა.
//
//        Bytecode გასაგებია ნებისმიერი JVM-ისთვის, რომელიც დაინსტალირებულია ნებისმიერ OS-ზე.
//        მოკლედ, java კოდის გაშვება შესაძლებელია ყველა ოპერაციულ სისტემაზე.
//
//
//        ----------------------------------------------------------------------------------------------------
//
//
//        6) რა არის ნაკადი? (2 ქულა)
//
//        ნაკადი არის საშუალება,რომლის მეშვეობითაც ჩვენ პროგრამას ვაკეთებინებთ ერთდროულად რამდენიმე რამეს, მაგალითად ჩვენ შეგვიძლია
//        ინტერნეტიდან ვიწერდეთ რაიმე ფაილს და ამავე დროს ჩვენი პროგრამა ქსელში აგზავნიდეს რაიმე ინფორმაციას და უგზავნიდეს მას სხვა პროგრამას.
//
//
//        ----------------------------------------------------------------------------------------------------
//
//        7) რამდენი ხერხით შეიძლება ნაკადის შექმნა? (2 ქულა)
//
//
//        ნაკადის შექმნის ორი გზა არსებობს ესენია : extends thread class და implement runnable interface.
//
//        ----------------------------------------------------------------------------------------------------
//
//        8) აღწერეთ ნაკადის სასიცოცხლო ციკლი. (2 ქულა)
//
//        როცა პროგრამას ვრთავთ ირთვება მთავარი ნაკადი main() მეთოდისთვის რომელიც თავსებდა სტეკ მეხსიერებაში,
//        ანუ ახალი ნაკადი რომ წარმოვქმნათ კიდევ უნდა დავამატოთ ახალი სტეკ მეხსირებაც,
//        თუ გვაქვს 2 სტეკ მეხსირება გვექნება 2 ნაკადიც, შემდეგ როცა ერთ სტეკში მეთოდები დაამთავრებს მოქმედებას გაითიშება და დაგვრჩება ერთ
//        ხოლო შმედეგ როცა მთავარი main() დაამთავრებს მუშაობას ნაკდებიც გაჩერდება რადგან სტეკიც აღარ გვექნება.
//
//        ----------------------------------------------------------------------------------------------------
//
//        9) რას ეწოდება ინკაფსულაცია? (2 ქულა)
//
//        ინკაფსულაცია - ესაა მექანიზმი, რომელიც პროგრამის კოდს
//        აკავშირებს იმ მონაცემებთან, რომლებთანაც ის მუშაობს და
//        ორივე ამ კომპონენტს იცავს გარე ჩარევებისაგან და
//        უნებართვო მიმართვებისგან.
//        Java-ში ინკაფსულაციის განხორციელების საფუძველს წარმოადგენს კლასი. თითოეული მოდელის აღწერა ხდება ერთი
//        ან რამდენიმე კლასის (classes) საშუალებით. კლასი შეიძლება
//        ჩავთვალოთ პროექტად, მონახაზად, შაბლონად, რომლის
//        დაპროგრამების ენა Java 15
//        მიხედვითაც შემდგომში შეიქმნება კონკრეტული ობიექტები. კლასი შეიცავს ობიექტის დამახასიათებელ ცვლადებისა და კონსტანტების აღწერას.
//        მათ უწოდებენ კლასის
//        ველებს ან თვისებებს (class fields). ობიექტის მოქმედებების
//        აღმწერ პროცედურებს უწოდებენ კლასის მეთოდებს (class
//methods). კლასის მეთოდები ან მოკლედ მეთოდები - ესაა
//        პროგრამის კოდი, რომელიც ახდენს მონაცემების დამუშავებას. ე. ი. კლასის წევრები შეიძლება იყოს ველები (თვისებები, ცვლადები)
//        და მეთოდები (პროცედურები).
//        სწორად დაწერილ Java პროგრამებში მეთოდები განსაზღვრავს კლასის წევრი-ცვლადების გამოყენების ხერხს. ანუ
//        კლასის ინტერფეისი და ურთიერთობა განისაზღვრება მეთოდებით, რომლებიც ახდენს მოქმედებებს კლასის ეგზემპლარების მონაცემებზე.
//        კლასის შიგნით შეიძლება აღიწეროს ჩადგმული კლასები
//        (nested classes) და ჩადგმული ინტერფეისები. ველები,
//        მეთოდები, ჩადგმული კლასები წარმოადგენს კლასის
//        წევრებს (class members). სხვადასხვა სკოლა (ალგორითმული
//        ენები) სხვადასხვა ტერმინი იყენებს
//
//        ----------------------------------------------------------------------------------------------------
//
//        10) რას ეწოდება მემკვიდრეობითობა? (2 ქულა)
//
//
//        მემკვიდრეობითობა - ესაა პროცესი, რომლის საშუალებითაც
//        ერთი ობიექტი იღებს მეორე ობიექტის თვისებებს. ეს განსაკუთრებით მნიშვნელოვანია იერარქიული კლასიფიკაციის
//        კონცეფციის მხარდაჭერისათვის. იერარქიის გამოყენების
//        გარეშე თითოეული ობიექტისათვის ცხადად უნდა აღიწეროს ყველა მისი თვისება.
//        მემკვიდრეობითობის წყალობით ობიექტისათვის უნდა აღიწეროს მხოლოდ ის
//        თვისებები, რომლებიც განსხვავებულია, ანუ რაც მის
//        უნიკალურობას განაპირობებს კლასის შიგნით. ობიექტს
//        შეიძლება მემკვიდრეობით გადაეცეს საერთო ატრიბუტები
//        თავისი მშობლიური ობიექტისაგან. უფრო დაწვრილებით
//        განვიხილოთ ეს პროცესი მაგალითებზე.
//        როგორც წესი, ადამიანთა უმრავლესობა გარე სამყაროს
//        აღიქვამს იერარქიულად ურთიერთ დაკავშირებული ობიექტების სახით, მაგალითად, ცხოველები, ძუძუმწოვრები და
//        ძაღლები. თუ საჭიროა ცხოველის ზოგადი, აბსტრაქტული
//        აღწერა, მაშინ შეიძლება შემოვიღოთ შემდეგი ატრიბუტები:
//        ზომები, ინტელექტის დონე, ჩონჩხის ტიპი. ცხოველებს ასევე ახასიათებთ გარკვეული მსგავსი (ერთნაირი) ქმედებებიც:
//        ჭამა, სუნთქვა, ძილი. ჩამოთვლილი ატრიბუტები და ქცევები ფაქტიურად წარმოადგენს ცხოველთა კლასის აღწერას.
//        თუ საჭიროა ცხოველთა უფრო კონკრეტული კლასის აღწერა, მაგალითად, ძუძუმწოვრების, საჭიროა უფრო
//        კონკრეტული ატრიბუტების მითითება, მაგალითად,,
//        კბილების ტიპი, სარძევე ჯირკვლები და სხვა. ამ აღწერას
//        ვუწოდოთ ცხოველების კლასის ქვეკლასი. თავის მხრივ
//        დაპროგრამების ენა Java 19
//        ძუძუმწოვრების კლასისათვის ცხოველების კლასი არის
//        სუპერ კლასი (მშობელი კლასი).
//        ვინაიდან ძუძუმწოვრები ესაა უფრო დაზუსტებულად განმარტებული ცხოველები, მათ აქვთ მემკვიდრეობით გადმოცემული ცხოველების ყველა ატრიბუტი. კლასების იერარქიის ქვედა დონის ქვეკლასი მემკვიდრეობით იღებს ყოველი
//        თავისი მშობელი კლასის ატრიბუტებს (სურ.2 ).
//        სურ. 2. კლასების იერარქიის სქემა
//        მემკვიდრეობითობა ინკაფსულაციასთანაცაა კავშირში. თუ
//        მოცემულ კლასს ინკაფსულირებული აქვს გარკვეული ატრიბუტები, მის ყოველ ქვეკლასსაც ექნება ეს ატრიბუტები და
//        პლუს დამატებითი ატრიბუტები, რომლებიც წარმოადგენენ
//        მისი სპეციალიზაციის შემადგენელ ნაწილს (სურ.3)
//
//        ----------------------------------------------------------------------------------------------------
//
//        11) რას ეწოდება პოლიმორფიზმი? (2 ქულა)
//
//        პოლიმორფიზმი სშუალებას იძლევა ერთნაირად მივმართოთ ობიექტებს, რომლებსაც აქვთ ერთნაირი ინტერფეისი.
//
//        პოლიმორფიზმი (ბერძნული სიტყვაა და ნიშნავს „მრავალ
//        ფორმას“) - ესაა თვისება, რომელიც საშუალებას იძლევა
//        ერთი და იგივე ინტერფეისი გამოყენებული იქნეს
//        მოქმედებათა საერთო კლასზე. კონკრეტული მოქმედება
//        განისაზღვრება კონკრეტული სიტუაციის ხასიათის
//        მიხედვით. განვიხილოთ მონაცემთა სტეკური ორგანიზება
//        (ესაა სიის ტიპი როდესაც „ბოლო მოსული პირველი გადის“
//        LIFO). მონაცემების ასეთი ორგანიზებისათვის შეიძლება
//        დაგვჭირდეს სამი ტიპის სტეკი. ერთი სტეკი
//        გამოიყენებოდეს მთელი რიცხვებისათვის, მეორე -
//        ნამდვილი ტიპის რიცხვებისათვის, მესამე -
//        სიმბოლოებისათვის. თითოეული ამ სტეკის რეალიზაციის
//        ალგორითმი ერთნაირია, იმისდა მიუხედავად, რომ თითოეული სხვადასხვა ტიპის მონაცემებს ინახავს.
//        არაობიექტორიენტირებული ენისათვის საჭირო იქნებოდა სამი სხვადასხვა ქვეპროგრამის დაწერა, თითოეულ მათგანს უნდა
//        ჰქონოდა განსხვავებული სახელი. Java-ში, პოლიმორფიზმის
//        წყალობით შესაძლებელია სტეკის ქვეპროგრამები ისე
//        შევქმნათ, რომ ყველას ერთი და იგივე სახელი ჰქონდეს.
//        უფრო ზოგადად პოლიმორფიზმის კონცეფციას ასეთი
//        ფრაზით აღწერენ: „ერთი ინტერფეისი, რამდენიმე მეთოდი“.
//        ეს ნიშნავს, რომ შესაძლებელია დავაპროექტოთ საერთო
//        ინტერფეისი ურთიერთდაკავშირებული მოქმედებების
//        ჯგუფისათვის
//
//        ----------------------------------------------------------------------------------------------------
//
//        12) რას ეწოდება სტეკი? (2 ქულა)
//
//        java პროგრამის შესრულების დროს გამოიყენება მეხსიერების ორი არე ჰიპი და სტეკი, ჰიპი გამოიყენება ობიექტების შესანახად.
//        სტეკი არის მეხსიერების ის სივრცე,რომელიც გამოიყენება მაშინ, როდესაც ვიძახებთ რაიმე მეთოდს,
//        ანუ ის საჭირო არის მეთოდების შსესასრულებლად.
//
//        ----------------------------------------------------------------------------------------------------
//
//        13) რას ეწოდება ჰიპი? (2 ქულა)
//
//
//        ჰიპი არის მეხსიერების არეალია, რომლეიც გამოიყენება jvm-ზე გაშვებული აპლიკაციებით შექმნილი ობიექტების შესანახად.
//
//        ----------------------------------------------------------------------------------------------------
//
//        14) რა არის Garbage Collection? (2 ქულა)
//
//        თუ ჩვენ გვაქვს ჰიპში ობიექტი რომელზეც არაფერი მიუთითებს,
//        ესეიგი არის უსარგებლო ამიტომ ვიყენებ Garbage Collection რომ ეს ობიექტები წაშალოს მეხსირებიდან.
//
//
//        garbage collection ჯავაში არის გამოუყენებელი ობიექტების "განადგურების" საშუალება,როდესაც garbage colection
//        ხედავს რომ ობიექტი არაფერზე არ მიუთითებს ამ დროს ის მას მეხსიერებიდან შლის.
//
//        --------------------------------------------------------------------------------------------------
//
//        15) რას ეწოდება კონსტრუქტორი? (2 ქულა)
//
//        კონსტრუქტორი არის კოდის ის ფრაგმენტი, რომელიც სრულდება მაშინ, როდესაც ვქმნით რაიმე კონკრეტული კლასის ობიექტს
//
//
//        --------------------------------------------------------------------------------------------------
//
//
//        16) რა განსხვავება კლასის მეთდსა და კლასის წევრს შორის? (2 ქულა)
//
//
//        კლასის მეთოდი ასარულებს გარკვეულ მოქმედებას ფუნქციას რომელიც პროგრამაზე აისახება
//        ხოლო კლასისი წევრი შეიძლება იყოს რაიმე პრიმიტივიც რომელც საერთოდ არც გამოვიყენოთ და უბრალოდ გვქონდეს.
//
//        კლასის წევრი ძირითადად არის ყველაფერი, რაც შეიძლება შეიცავდეს კლასის ობიექტს, მეთოდი არის კონკრეტული ტიპის წევრი
//        მეთოდები განსაზღვრავს მოქმედებებს,რომელტა შესრულებაც კლასს შეუძლია.
//
//        -------------------------------------------------------------------------------------------
//
//        17) რას ეწოდება Package? (2 ქულა)
//
//        გამოიყენება კლასების დასაჯგუფებლად რომ თავიდან ავიცილოთ ერთნაირი კლასისი სახელები და დავწეროთ უკეთესი კოდი.
//
//        package არის მსგავსი კლასის ტიპების, ინტერფეისების და ქვეპაკეტების ჯგუფის,
//        ჯავაში პაკეტი შეიძლება დაიყოს ორ ფორმად : ჩაშენებული და მომხმარებლის მიერ განსაზღვრული პაკეტებით.
//        არსებობს მრავალი ჩაშენებული პაკეტები როგორებიცაა : java,lang,awt,javax,swing,net,io,util,sql და ა.შ.
//
//
//        -------------------------------------------------------------------------------------------
//
//
//        18) რა განსხვავებაა final კლასსა და abstract კლასს შორის? (2 ქულა)
//
//final კლასების დროს არ შეგვიძლია ის ვაქციოთ რომელიმე კლასის მშობელ ან წინაპარ კლასად,ასევე final class
//უზღუდავს სხვა კლასებს მის მონაცემებსა და მეთოდებზე წვდომას,ხოლო რაც შეეხება abstract კლასს თუ ჩვენ კლასს გამოვაცხადებთ
//        აბსტრაქტულად ამ დროს მისი ობიექის შექმნა აღარ შეგვეძლება ესეთი კლასები კი საჭიროა იმისთვის,რომ
//        იდგნენ,რომელიღაც კლასების იერარქიის სათავეში და გაუზიარონ სხვებს თავისი მეთოდები და  ცვლადები.
//
//        -------------------------------------------------------------------------------------------
//
//        19) რას ეწოდება გამონაკლისი შემთხვევა? (2 ქულა)
//
//
//        გამონაკლისი შემთხვევა მოიაზრებს, როდესაც ჩვენ გვაქვს რაიმე ისეთი კოდის ფრაგმენტი,რომელიც საფრთხეს შეიცავს,ანუ შეიძლება მას ჰქონდეს გამონაკლსიი შემთხვევა
//        შესრულება არ შესრულების თვალსაზრისით,მაგალითად თუ ჩვენ გვსურს filewriter-ით ახალი ფაილის შექმნა და ჩვენ მას try და catch ბლოკში არ მოვათავსებთ ამის შესრულების
//        საშუალებას ჯავა არ მოგვცემს,რადგან ფაილის შექმნა შესაძლოა მოხდეს, როგორც წარმატებით ისე წარუმატებლად ანუ ჩვენი კოდი უნდა დავაზღვიოთ გამონაკლისი შემთხვევებისთვის.
//
//        -------------------------------------------------------------------------------------------
//
//        20) რამდენი ხერხით შეიძლება გამონაკლისი შემთხვევის დამუშავება? (2 ქულა)
//
//        ამისთვის გვაქვს 2 მეთოდი პირველი ეს არის try-catch-finally და მეორე try-with-resource
//
//        -------------------------------------------------------------------------------------------
//
//        21) რას ეწოდება ინტერფეისი? (2 ქულა)
//
//interface შეგვიძლია მივიჩნიოთ 100 პროცენტით აბსტრაქტულ კლასებად და ის გამოიყენება ქცევის აღსაწერად,რომელიც შემდეგ
//        რაიმე კონკრეტულმა კლასმა უნდა მოახდინოს მისი იმპლემენტაცია
//
//
//        -------------------------------------------------------------------------------------------
//
//        22) რა განსხვავებაა ინტერფეისსა და აბსტრაქტულ კლასს შორის? (2 ქულა)
//
//        აბსტრაქტულ კლასს შეიძლება ქონდეს აბსტრაქტული და არა აბსტრაქტული მეთოდები, ხოლო ინტერფეის მხოლოდ აბსტრაქტული.
//
//        -------------------------------------------------------------------------------------------
//
//
//
//        23) რა განსხვავება public და protected მოდიფიკატორებით განსაზღვრულ კლასის წევრებს შორის? (2
//        ქულა)
//
//        განსხვავება არის ის,რომ public მოდიფიკატორით განსაზღვრული კლასის წვდომა შესაძლებელია გარე კლასიდან, მაგრამ protected
//ზე წვდომა შეუძლებელია გარე კლასიდან.
//
//        -------------------------------------------------------------------------------------------
//
//        24) რა განსხვავება public მოდიფიკატორსა და მოდიფიკატორის გარეშე განსაზღვრულ კლასის წევრს
//        შორის? (2 ქულა)
//
//
//
//        chasanishni
//
//
//
//        -------------------------------------------------------------------------------------------
//
//
//        25) რა განსხვავება სტეკსა და ჰიპს შორის? (2 ქულა)
//
//
//        ძირითადი განსხვავება Stack მეხსიერებასა და heap მეხსიერებას შორის არის ის,
//        რომ სტეკი გამოიყენება მეთოდის თანმიმდევრობით შესასრულებლად და ლოკალური ცვლადების შესანახად,
//        ხოლო ჰიპი ინახავს ობიექტებს და იყენებს დინამიური მეხსიერების განაწილებას და განაწილებას
//
//        -------------------------------------------------------------------------------------------
//
//        26) რა განსხვებაა FileWriter და BufferedWriter კლასების გამოყენებას შორის? (2 ქულა)
//
//        fileWriter ვიყენებთ მაშინ,როდესაც ჩანაწერების რაოდენობა არ არის ბევრი, თუმცა თუ ბევრია ამ შემთხვევაში უმჯობესია
//        გამოვიყენოთ BufferedWriter,რადგან როდესაც ფაილში ჩასაწერად ვგზავნით რაიმე ინფორმაიციას ეს buffer ინახავს მეხსიერეის
//        გარკვეულ სივრცეში ამ ინფორმაციას და როდესაც გაივსება ეს buffer შემდეგ ეს ინფორმაცია მიდის ფაილში ჩასაწერად,რაც არ ხდება
//        fileWriter-ის შემთხვევაში და ხდება სათითაოდ ჩაწერა.
//
//        -------------------------------------------------------------------------------------------
//
//        27) რას ეწოდება Thread sheduler? (2 ქულა)
//
//        thread scheduler ჯავაში არის jvm-ის ნაწილი,რომელიც წყვეთს თუ რომელი ნაკადი უნდა გაეშვას.
//
//        -------------------------------------------------------------------------------------------
//
//        როდესაც რამდენიმე ნაკადი მუშაობს ერთსა და იმავე მონაცემებზე და ჩვენი მონაცემების მნიშვნელობა იცვლება,
//        ეს სცენარი არ არის უსაფრთხო და ჩვენ მივიღებთ არათანმიმდევრულ შედეგებს.
//        როდესაც ნაკადი უკვე მუშაობს ობიექტზე და ხელს უშლის სხვა ნაკადის მუშაობას იმავე ობიექტზე,
//        ამ პროცესს ეწოდება Thread-Safety.
//
//
